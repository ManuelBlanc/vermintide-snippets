---
title: Strafe jumping
---

mod:hook(PlayerCharacterStateJumping, "on_enter", function(func, self, unit, input, dt, context, t, previous_state, params)
	local ms = PlayerUnitMovementSettings.move_speed
	PlayerUnitMovementSettings.move_speed = 9999
	func(self, unit, input, dt, context, t, previous_state, params)
	PlayerUnitMovementSettings.move_speed = ms
end)

mod:hook_origin(CharacterStateHelper, "move_in_air", function(first_person_extension, input_extension, locomotion_extension, speed, unit, wait_timer_force_backwards_movement, wait_timer_force_forward_movement)
    local movement = CharacterStateHelper.get_movement_input(input_extension)
    local force_y_movement = 0
    if wait_timer_force_backwards_movement and wait_timer_force_backwards_movement > 0 then
        force_y_movement = force_y_movement - 1
    end
    if wait_timer_force_forward_movement and wait_timer_force_forward_movement > 0 then
        force_y_movement = force_y_movement + 1
    end
    if force_y_movement ~= 0 then
        Vector3.set_y(movement, force_y_movement)
    end
    local move_direction = Vector3.normalize(movement)
    local unit_rotation = first_person_extension:current_rotation()
    local move_velocity = Vector3.normalize(Vector3.flat(Quaternion.rotate(unit_rotation, move_direction)))
    local movement_settings_table = PlayerUnitMovementSettings.get_movement_settings_table(unit)
    local move_cap = math.clamp(movement_settings_table.move_speed, 0, PlayerUnitMovementSettings.move_speed)
    if movement.y < 0 then
        speed = speed * movement_settings_table.backward_move_scale
        move_cap = move_cap * movement_settings_table.backward_move_scale * 0.9
    end
    local prev_move_velocity = Vector3.flat(locomotion_extension:current_velocity())
    local new_move_velocity = prev_move_velocity + move_velocity * speed
    local projection = Vector3.dot(new_move_velocity, move_velocity)
    local diff = projection - move_cap * movement_settings_table.player_speed_scale 
    if diff > 0 then
        new_move_velocity = new_move_velocity - diff*move_velocity
    end
    locomotion_extension:set_wanted_velocity(new_move_velocity)
end)
