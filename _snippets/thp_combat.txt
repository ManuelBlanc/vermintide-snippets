---
title: Heal-over-time while in combat
requested_by: Bioshift
---


local HEAL_AMOUNT        = 1 -- MUST be multiple of .25
local TIME_BETWEEN_HEALS = 1
local BUFF_DURATION      = 2
local BUFF_MAX_STACKS    = 1
local TALENT_TO_HIJACK   = { 4, 3 } -- row, column

-- BUFF 1: A simple heal over time.
BuffTemplates.bioshift_combat_heal_proc = { buffs = { {
    name = "bioshift_combat_heal_proc",
    icon = "melee_heal_on_crit", -- Regrowth icon (unused in base game).
    refresh_durations = true,
    max_stacks = BUFF_MAX_STACKS,
    duration = BUFF_DURATION,
    update_func = "markus_huntsman_update_heal_ticks", -- Heals THP.
    time_between_heals = TIME_BETWEEN_HEALS,
    heal_amount = HEAL_AMOUNT,
} } }

-- BUFF 2: Add the first one when hitting an enemy.
BuffTemplates.bioshift_combat_heal = { buffs = { {
    name = "bioshift_combat_heal",
    event_buff = true, event = "on_damage_dealt",
    buff_func = function(player, buff, params)
        if params[2] <= 0 then return end
        if not (params[6] == "MELEE_1H" or params[6] == "MELEE_2H") then return end
        local player_unit = player.player_unit
        if not Unit.alive(player_unit) then return end
        local buff_extension = ScriptUnit.has_extension(player_unit, "buff_system")
        buff_extension:add_buff("bioshift_combat_heal_proc", { attacker_unit = player_unit })
    end,
} } }

-- TALENT: Simple talent to be added to all careers.
local new_talent = {
    name = "bioshift_heal_in_combat_talent",
    description = "bioshift_heal_in_combat_talent_desc",
    icon = "melee_heal_on_crit",
    cost = 50, num_ranks = 1,
    buffer = "client",
    description_values = {
        { value = BuffTemplates.bioshift_combat_heal_proc.buffs[1].heal_amount /
                  BuffTemplates.bioshift_combat_heal_proc.buffs[1].time_between_heals },
    },
    buffs = { "bioshift_combat_heal" },
}

local index = 99 -- Any unused index in all talent tables will do.
local row, col = unpack(TALENT_TO_HIJACK)
TalentIDLookup[new_talent.name] = { talent_id = index, hero_name = nil } 
for hero_name, all_talents in pairs(Talents) do
    all_talents[index] = new_talent
    local talent_trees = TalentTrees[hero_name]
    talent_trees[1][row][col] = new_talent.name -- Loop unrolled.
    talent_trees[2][row][col] = new_talent.name
    talent_trees[3][row][col] = new_talent.name
end

-- Custom localizations.
local custom_localizations = {
[new_talent.name] = "Bioshift's Healing Talent",
[new_talent.description] = "Restores %s temporary health per second while in combat.",
}
mod:hook("Localize", function(func, text_id)
    return custom_localizations[text_id] or func(text_id)
end)
